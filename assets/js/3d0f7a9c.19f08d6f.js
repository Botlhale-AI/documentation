"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3685],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||s;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var l=2;l<s;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},646:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var a=n(7462),o=n(3366),s=(n(7294),n(3905)),r=["components"],i={},c="Custom Functions",l={unversionedId:"Platform/bot-builder/Custom Functions",id:"Platform/bot-builder/Custom Functions",isDocsHomePage:!1,title:"Custom Functions",description:"Introducing our state-of-the-art bot builder platform, designed to empower you with the capabilities of natural language processing (NLP) and enhance your conversational AI solutions. As part of our commitment to delivering a truly tailored experience, we are delighted to offer a range of custom functions (some preset/predefined, some customizable) that will revolutionize the way your bots interact with your end users and/or customer. Custom functions enable you to create personalized and dynamic conversational flows, allowing your bots to understand user intents, extract key information, and generate intelligent responses. With our platform, you can effortlessly integrate custom functions to perform tasks such as third party integrations, hitting end-points on a server, processing specific documents, and much more. These functions not only streamline the user experience but also provide you with invaluable insights and increased efficiency. We are excited to bring you this cutting-edge technology and invite you to explore the endless possibilities it offers.",source:"@site/docs/0 - Platform/bot-builder/5 - Custom Functions.md",sourceDirName:"0 - Platform/bot-builder",slug:"/Platform/bot-builder/Custom Functions",permalink:"/docs/Platform/bot-builder/Custom Functions",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dialogue Elements",permalink:"/docs/Platform/bot-builder/Dialogue Elements"},next:{title:"Train",permalink:"/docs/Platform/bot-builder/Training"}},d=[{value:"Human Handoff Integration",id:"human-handoff-integration",children:[]}],u={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"custom-functions"},"Custom Functions"),(0,s.kt)("p",null,"Introducing our state-of-the-art bot builder platform, designed to empower you with the capabilities of natural language processing (NLP) and enhance your conversational AI solutions. As part of our commitment to delivering a truly tailored experience, we are delighted to offer a range of custom functions (some preset/predefined, some customizable) that will revolutionize the way your bots interact with your end users and/or customer. Custom functions enable you to create personalized and dynamic conversational flows, allowing your bots to understand user intents, extract key information, and generate intelligent responses. With our platform, you can effortlessly integrate custom functions to perform tasks such as third party integrations, hitting end-points on a server, processing specific documents, and much more. These functions not only streamline the user experience but also provide you with invaluable insights and increased efficiency. We are excited to bring you this cutting-edge technology and invite you to explore the endless possibilities it offers."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://botlhale-ai-assets.s3.amazonaws.com/doc-imgs/actions-dashboard.png",alt:"actions dasboard"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://botlhale-ai-assets.s3.amazonaws.com/doc-imgs/actions-dashboard-error.png",alt:"actions dasboard error"}),"\n",(0,s.kt)("img",{parentName:"p",src:"https://botlhale-ai-assets.s3.amazonaws.com/doc-imgs/actions-dashboard-success.png",alt:"actions dasboard success"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'class ResetAllSlots(Action):\n    def name(self) -> Text:\n        return "action_reset_all_form_items_preset"\n\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        return [AllSlotsReset()]\n\n#beginhandlingfiles\nclass ActionHandleImage(Action):\n    def name(self) -> Text:\n        return "action_handle_image"\n    async def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any],) -> List[EventType]:\n      # intent= tracker.latest_message[\u2018intent\u2019].get(\u2018name\u2019)\n\n      img_url = tracker.latest_message[\'text\'][22:-2]\n      url = "https://hmsa.zendesk.com/api/v2/tickets?API_TOKEN=kfz5uygbXuUY1BArFuvz5RmLekQ04A5S9pTnL6fW"\n      \n      payload = json.dumps(\n            {\n                "ticket": \n                    {\n                        "subject": "WhatsApp Chatbot - Stock Request (Image Attached)", \n                        "comment": {"body": "Stock Request with Image Attached"},\n                        "priority": "high",\n                        "tags": "tag",\n                        "type": "task",\n                        "email_ccs": [\n                        # { "user_id": "562624", "action": "put" },\n                        { "user_email": "athi@botlhale.ai", "user_name": "Additional Email", "action": "put"},\n                        { "user_email": "claudia.southgate@hm.com", "user_name": "H&M Team Member", "action": "put"}\n                      ],\n                      "comment": {\n                        "body": f"Please find the attached image.\\nClick here to download image: {img_url}"\n                      },\n                      "tags": ["image"],\n                      "uploads": [\n                          {\n                              "filename": "image_path",\n                              "content_type": "image/jpeg",\n                              "data": "image_data"\n                          }\n            ]\n                    }\n            }\n        )\n\n      headers = {\n  \'Content-Type\': \'application/json\',\n  \'Authorization\': \'Basic YXRoaUBib3RsaGFsZS5haTojR3VkZGFiYjExMQ==\',\n  \'Cookie\': \'__cfruid=8aec605012b96541fd8498f62e68685556054667-1685959857; __cfruid=1a5e38ce20f7b8c45d5d9cf52fb3e86cc65e7dbc-1686037392; _zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--459ed01949a36415c1716b5711271c3d08918307\'\n}\n\n\n      response = requests.request("POST", url, headers=headers, data=payload)\n      \n      \n      from rasa_sdk.events import ActionExecuted, UserUttered\n      \n      data = {\n                  "intent": {\n                      "name": "after_image_upload",\n                      "confidence": 1.0,\n                  }\n            }\n      return [\n                  ActionExecuted("action_listen"),\n                  UserUttered(text="/after_image_upload", parse_data=data),\n            ]\n    # dispatcher.utter_message(text = str(tracker.latest_message))\n          \nclass ActionHandlePDF(Action):\n    def name(self) -> Text:\n        return "action_handle_pdf"\n    async def run(\n            self,\n            dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any],\n        ) -> List[EventType]:\n            dispatcher.utter_message(text="Hi, unfortunately, I do not process pdf files.")\n            #dispatcher.utter_message(text=str(tracker.latest_message))\n#endhandlingfiles\n \nclass ActionGreet(Action):\n    def name(self) -> Text:\n        return "action_greet"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_greet...\')\n        \n        # get user number\n        sessionID_payload = {"sender_id":tracker.sender_id}\n        check_contact_payload = {"sender_id":tracker.sender_id}\n        platform = \'whatsapp\' #requests.post(\'https://app.botlhale.xyz/check_platform\', platform_payload).content.decode(\'utf-8\')\n        actual_contact = requests.post(\'https://whatsapp.botlhale.xyz/getuserid\', sessionID_payload).content.decode(\'utf-8\')\n        \n        whatsapp_user_name = requests.post(\'https://whatsapp.botlhale.xyz/getusername\', {"number": actual_contact}).content.decode(\'utf-8\')\n        \n        verification_url = "https://app-dev.botlhale.xyz/hm/verify_user/"\n\n        verification_response = None\n        verification_body   = {\'number\': actual_contact, \'task\':"verify_user"}\n        params = {}\n        header = {}\n        verification_response = requests.post(verification_url, verification_body, header)\n\n        if verification_response.json()[\'status\']==False: # user greeting for the first time\n            print("present terms")\n            message_to_customer = "Hello, *" + whatsapp_user_name + "*!\\n\\nWelcome to H&M South Africa. My name is *Hennes*, I am a CHATBOT, and I am here to assist you. You can interact with me through text or through speech (voice notes).\\n\\n Send *Hi* to go back to the main menu."\n            \n            buttons = [{"title":"View Terms", "payload":"/view_terms"}, {"title":"Accept Terms", "payload":"/accept_terms"}, {"title":"Decline Terms", "payload":"/decline_terms"}]\n            dispatcher.utter_message(text=message_to_customer, buttons=buttons)\n\n        else:\n          print("hey, great to have you back!")\n          message_to_customer = "Hello, *" + whatsapp_user_name + "*!\\n\\nWelcome to H&M South Africa. My name is *Hennes*, I am a CHATBOT, and I am here to assist you. You can interact with me through text or through speech (voice notes)."\n          buttons = [{"title":"Main Menu", "payload":"/main_menu"}]\n          dispatcher.utter_message(text=message_to_customer, buttons=buttons)\n          \n        return []\n \nclass ActionCheckTradingHours(Action):\n    def name(self) -> Text:\n        return "action_check_trading_hours"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_check_trading_hours...\')\n        \n        store_city = tracker.slots.get(\'choose_city\')\n        store_city = store_city.replace(\'/\',\'\')\n        store_city = store_city.replace(\' \',\'-\')\n        store_city = store_city.lower()\n        #store_city = store_city.replace(\' \', \'\')\n        store_name = tracker.slots.get(\'choose_store\')\n        store_name = store_name.replace(\'/\',\'\')\n\n        # store-locator config-info\n        url = f"https://www.hm.com/za/store-locator/south-africa/{store_city}/{store_name}"\n  \n        payload = {}\n\n        headers = {\n            \'Cookie\': \'HMCORP_locale=en_US; HMCORP_locale_autoassigned=true; HMCOUNTRY_name=United States; _abck=24FDDFA18261EA7F279DC8286F2C5E31~-1~YAAQIWdNaMJs3ayFAQAAGHLsvgkcCtRhj5bvX78LPzYs8hpwYnE5Pm9B6F14LRS4g1QlX4asMUvYlFcbNMdfM2QMR7o2xifflgHIMyx3EOFOp1NU8R4HrmWvuXZAESeZZVE304pnW8Bh0ferQmbydSmjd6aqLvG3ciNczIG8LOrIn00ZI6GB5FGVDi4u8eP0DWm2Cg1z0pI6qDD9kTQ7pIrLu+qg2KzzJGg415HD2yj6aNnlDFbPLNf9af1yy0uExGqBA2kfC5e1CPW3kf0j+W0GaNl6OR5OiP0cOHnrvBHz3RRsythLaoRgyXrXsn2wZ+Oih5B6RY052p5ddtLpaiXq3e7zU5DMlJ9NY7sm6sqGWZH0yA==~-1~-1~-1; ak_bmsc=336981498807787967D6E9BF57DEAE90~000000000000000000000000000000~YAAQb+4uF8KAzKuFAQAAdp32vhJNegEQkxZSBRgvCo8rUB/0J5Pbu3YFF1KdI/srI248AaCCB3/p1Cn/bzE8Lup54U5aoMtkdlgw1rIQhF3ARvQPLvl24mzn/0ILdA7pMZYhW15tmEUPMTqzbvv6bZxqA1Lxop++fnohClzHNVlnRYis9iWaMw1yDe1kf/ZHaiTVeDhC8XEkREf/KXXbeeUuJsxb8+xooDTuiZZV0YAwLgGcCKhgffsX0yHEG2XZh/Aa91z2+dDt56LNacl1yPrTs/xZspLVJKefVrAdBJBNJ8ViE1liPxEy158cKN2DPIXsNIxhXIDu51UxwwrPnFaOa3YgfODb9lJmghRcsYeyjMIkQCcr; bm_mi=1D4D588B115D81B87057848EE055EC27~YAAQb+4uF3+RzKuFAQAAgQX5vhKTUceN6sF9zjhU+Vmy6rEHJtY8TrXsj2owpbzz/snXr5ZWneiRmXthJrZgyXAeDuRdko/Reb9N9cAP1kESCEHFuSaVXR4+DnQHXJv0OO0yn//CQylmwE2njbIJHQj3EkT820a6jBTzSA7+xVI7PAEJcK56Gtr0QvbF6f60lVIjzoQ8dyFhHWr0eNj6/w2YxQSXy57xQ1/5cm45UKK9nEbaHACaepEbS5GGCZkIovghNqE0des8K237lQ1cnBD/S1+FAWZauGrys/ou5M0lmNvk4plaogIYMNKe+cYx5B3RcB+hlNFkeCIHV+JK+tXVVH3OUAXPZrZmXN1HZAqD+kaEbOSviSP8G0GrWBFvndHP71etScowqQ==~1; bm_sv=1CCF0C9ED9BFDA47B0EC4CCC2FE5A7AC~YAAQb+4uF4CRzKuFAQAAgQX5vhL+wi8xCOdhODrv4EqkqwrY+cZqmIo2PLF+7JpIcDDtQHZdRB4wsx/UWoK2gxHQrS81I3zkq3mAZ3ufEP3n8HtYoojvPAb5BwkZLYbFPav0Yxd3TSfP8fYlHG3LyelqfZjFAscw4SvgKqq/xYJC6d/Q6d6DHSa1eRJiDGV0vQgZ5dD/kQuvnClXUUMAXgL4godk1ktefjMHwbzS0eYxnCu9jWv1feQi1mU=~1; bm_sz=EE895B8175ADDB8843F0BEBED664882A~YAAQIWdNaMNs3ayFAQAAGHLsvhIn0PTphS6AnOT7UK7BZRidurEpyGhlAD1sbInkbFKcdBH01sgaOTCKaNGUqqBhuARBkx4Rs5Wz2+2HNLcCKL+3vUJNQsE7dI6vdws0ONwa+vpYgr07hokSJKDzj2+RldWRSvDarcB6agONnvtbeYU8Ie+Ls/VEe3kSEL7YOHq9ywnAo/kSFm89TxXSQmspq8un6bVnctXrHkUdYJCR64EWeeKvwMn5xPNcfjrYE+AGDBSoVpjmQb56UBlw5CmyaeSNpQr9JgJzTfHdwA==~3228211~3224120; ARRAffinity=6bd50489cc791ea1ae55225c0ec2598308fd3113beeb7ca4800977de19a680d6; ARRAffinitySameSite=6bd50489cc791ea1ae55225c0ec2598308fd3113beeb7ca4800977de19a680d6; VtexWorkspace=master%3A-; akavpau_www2_en_us=1673946552~id=7c8b8c623438ae5211577c96d77f9673; qtrans_front_language=za\',\n            \'Host\': \'www.hm.com\',\n            \'User-Agent\': \'Chrome v22.2 Linux Ubuntu\',\n            \'Accept\': \'*/*\',\n            \'Accept-Encoding\': \'gzip, deflate, br\',\n            \'Connection\': \'keep-alive\',\n            \'X-Requested-With\': \'XMLHttpRequest\'\n        }\n        #buttons = [{"title": "Back to Menu","payload": \'/main_menu\',}]\n        buttons = [{"payload": "/main_menu", "title": "Back to Menu"},]\n        message_to_user = ""\n        \n        try:\n          response = requests.request("GET", url, headers=headers, data=payload)\n          \n          html_doc = response.content\n          html_content = BeautifulSoup(html_doc, \'html.parser\') # parse html response as readable info\n          soup_table = html_content.table # extract table from html response into a dictionary\n          \n          opening_hours = {}\n          day  = ""\n          times = ""\n          \n          for row in soup_table.findAll(\'tr\'):\n              print("ROW",row)\n              aux = row.findAll(\'td\')\n\n              day = aux[0].string\n              opening_hours[day] = aux[1].text\n\n          dispatcher.utter_message(text=f"*{store_name.upper()} ({store_city.upper()}) TRADING HOURS*")\n          \n          for item in opening_hours:\n            message_to_user = str(item)+" : "+str(opening_hours[item])\n            dispatcher.utter_message(text=message_to_user)\n          dispatcher.utter_message(text=f"\\n_More info about {store_name.upper()} on Store Locator: "+str(url)+"_")\n\n        except:\n          result = False\n          message_to_user = f"Something went wrong with retrieving the trading hours of the {store_name} store, please try again by *selecting one of the listed options under stores*."\n          dispatcher.utter_message(text=message_to_user, buttons = buttons)\n        \n        finally:\n          dispatcher.utter_message(text="", buttons = buttons)\n          \n        \n        return [] \n      \n\n    \n \nclass ActionViewTerms(Action):\n    def name(self) -> Text:\n        return "action_view_terms"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_view_terms...\')\n        \n        try:\n            payload = {\n                  \'type\': \'document\', # document/image/video\n                  \'link\': \'https://botlhale-ai-assets.s3.amazonaws.com/hm_terms.pdf\',\n                  \'caption\': \'Terms\',\n                  \'filename\': \'Terms.pdf\' # only include when type == document\n                }\n            # accept or decline terms\n            buttons = [{"title": "Accept", "payload": "accept_terms"}, \n                        {"title": "Decline", "payload": "decline_terms"}]\n            dispatcher.utter_message(text="Please find the terms and conditions attached or you can view them on https://www.hm.com/za/ ",json_message=payload, buttons=buttons)\n            \n        except:\n          response = \'Something went wrong, please type *hi* to resume.\'\n          dispatcher.utter_message(text=response)\n        \n        return []\n# action for store_names below\n\nclass AskForSlotAction(Action):\n    def name(self) -> Text:\n        return "action_ask_choose_store" # confirm the name here on domain.yml responses\n\n    def run(\n        self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict\n    ) -> List[EventType]:\n        store_city = tracker.slots.get(\'choose_city\')\n        store_city = store_city.replace(\'/\',\'\')\n        \n        print("STORE_CITY VALUE: ", store_city)\n        #dispatcher.utter_message(text="inside slot action: city : "+store_city)\n        \n        buttons = {\n            "Bloemfontein": [\n            {"payload": "loch-logan-waterfront", "title": "Loch Logan Waterfront"}, \n           \n        ],\n            "Cape Town": [\n            {"payload": "canal-walk-shopping-centre", "title": "Canal Walk Shopping Centre"}, \n            {"payload": "cavendish-square","title": "Cavendish Square"},\n            {"payload": "eikestad-mall", "title": "Eikestad Mall"}, \n            {"payload": "somerset-mall", "title": "Somerset Mall"}, \n            {"payload": "table-bay-mall", "title": "Table Bay Mall"}, \n            {"payload": "victoria-alfred-waterfront", "title": "Victoria & Alfred Waterfront"}, \n            {"payload": "tygervalley-shopping-center", "title": "Tygervalley Shopping Center"},   \n        ],\n            "Durban": [\n            {"payload": "gateway-theatre-of-shopping", "title": "Gateway Theatre of Shopping"},\n            {"payload": "the-pavilion", "title": "The Pavilion"},\n            {"payload": "ballito-junction", "title": "Ballito Junction"},\n            {"payload": "ballito-junction-kids", "title": "Ballito Junction Kids"},\n        ],\n            "East London": [\n            {"payload": "vincent-park", "title": "Vincent Park"}, \n        ],\n            "Johannesburg": [\n            {"payload": "clearwater-mall", "title": "Clearwater Mall"}, \n            {"payload": "cresta-shopping-centre", "title": "Cresta Shopping Centre"},\n            {"payload": "east-rand-mall", "title": "East Rand Mall"},\n            {"payload": "eastgate-shopping-centre", "title": "Eastgate Shopping Centre"},\n            {"payload": "fourways-mall", "title": "Fourways Mall"},\n            {"payload": "mall-of-africa", "title": "Mall of Africa"},\n            {"payload": "mall-of-the-south", "title": "Mall of the South"},\n            {"payload": "rosebank-mall", "title": "Rosebank Mall"},\n            {"payload": "sandton-city", "title": "Sandton City"},\n            {"payload": "westgate-shopping-centre", "title": "Westgate Shopping Centre"}\n        ],\n            "Nelspruit": [\n            {"payload": "ilanga-mall", "title": "Ilanga Mall"}, \n        ],\n            "Polokwane": [\n            {"payload": "mall-of-the-north", "title": "Mall of the North"}, \n        ],\n            "Port Elizabeth": [\n            {"payload": "walmer-park", "title": "Walmer Park"}, \n        ],\n            "Pretoria": [\n            {"payload": "centurion-mall", "title": "Centurion Mall"},\n            {"payload": "menyln-park", "title": "Menyln Park"},\n        ],\n            "Richards Bay": [\n            {"payload": "boardwalk-mall", "title": "Boardwalk Mall"},\n        ],\n            "Witbank": [\n            {"payload": "highveld-mall", "title": "Highveld Mall"},\n        ],\n}\n\n        \'\'\'\n        if store_city == "Other":\n            dispatcher.utter_message(text="Please tell us what province/district you live in.")\n        else:\n            print(buttons[store_city])\n            dispatcher.utter_message(text="Please select your store_city.", buttons=buttons[store_city])\n        \'\'\' \n        \n        print(buttons[store_city])\n        \n        dispatcher.utter_message(text="Select the name of the *store*:", buttons=buttons[store_city])\n        \n        return []\n \nclass ActionSendFeedbackToZendesk(Action):\n    def name(self) -> Text:\n        return "action_send_feedback_to_zendesk"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_send_feedback_to_zendesk...\')\n        \n        customer_name = tracker.slots.get("customer_name")\n        customer_email = tracker.slots.get("customer_email")\n        customer_feedback_category = tracker.slots.get("category")\n        customer_feedback_category = customer_feedback_category.replace(\' \', \'-\')\n        customer_feedback = tracker.slots.get("actual_feedback")\n        \n        message_to_user = "Thank you, "+customer_name+"! \\nWe have received your feedback. We will follow up accordingly."    \n\n        url = "https://hmsa.zendesk.com/api/v2/tickets?API_TOKEN=kfz5uygbXuUY1BArFuvz5RmLekQ04A5S9pTnL6fW" #7e5ohEU5g1jjzNE6kezgRBkGqyoKPkRZDTOsztTU\n\n        payload = json.dumps(\n            {\n                "ticket": \n                    {\n                        "subject": "WhatsApp Chatbot - Customer Feedback: "+str(customer_feedback_category), \n                        "comment": {"body": customer_feedback},\n                        "priority": "high",\n                        "tags": customer_feedback_category,\n                        "type": "task",\n                        "email_ccs": [\n                        # { "user_id": "562624", "action": "put" },\n                        { "user_email": "athi@botlhale.ai", "user_name": "Additional Email", "action": "put"},\n                        { "user_email": "claudia.southgate@hm.com ", "user_name": "H&M Team Member", "action": "put"}\n                      ]\n                    }\n            }\n        )\n\n        headers = {\n  \'Content-Type\': \'application/json\',\n  \'Authorization\': \'Basic YXRoaUBib3RsaGFsZS5haTojR3VkZGFiYjExMQ==\',\n  \'Cookie\': \'__cfruid=8aec605012b96541fd8498f62e68685556054667-1685959857; __cfruid=1a5e38ce20f7b8c45d5d9cf52fb3e86cc65e7dbc-1686037392; _zendesk_cookie=BAhJIhl7ImRldmljZV90b2tlbnMiOnt9fQY6BkVU--459ed01949a36415c1716b5711271c3d08918307\'\n}\n\n\n        response = requests.request("POST", url, headers=headers, data=payload)\n\n        print(response.text)\n        \n        dispatcher.utter_message(text=message_to_user)\n        \n        return []\n \nclass ActionViewProductNumber(Action):\n    def name(self) -> Text:\n        return "action_view_product_number"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_view_product_number...\')\n        payload = {\n                  \'type\': \'image\', # document/image/video\n                  \'link\': \'https://botlhale-ai-assets.s3.amazonaws.com/product_number.jpeg\',\n                  \'caption\': \'\',\n                  \'filename\': \'ProductNumber.pdf\' # only include when type == document\n                }\n        dispatcher.utter_message(text="*PRODUCT NUMBER EXAMPLE:*",json_message=payload)\n        return []\n\nclass ActionTriggerLiveAgent(Action):\n    def name(self) -> Text:\n        return "action_trigger_live_agent"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_trigger_live_agent...\')\n        from rasa_sdk.events import ActionExecuted, UserUttered\n        data = {\n                  "intent": {\n                      "name": "human_handoff",\n                      "confidence": 1.0,\n                  }\n            }\n        return [\n                    ActionExecuted("action_listen"),\n                    UserUttered(text="/human_handoff", parse_data=data),\n              ]\n \nclass ActionVerifyTerms(Action):\n    def name(self) -> Text:\n        return "action_verify_terms"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_verify_terms...\')\n        # get user number\n        sessionID_payload = {"sender_id":tracker.sender_id}\n        check_contact_payload = {"sender_id":tracker.sender_id}\n        platform = \'whatsapp\' #requests.post(\'https://app.botlhale.xyz/check_platform\', platform_payload).content.decode(\'utf-8\')\n        actual_contact = requests.post(\'https://whatsapp.botlhale.xyz/getuserid\', sessionID_payload).content.decode(\'utf-8\')\n        \n        whatsapp_user_name = requests.post(\'https://whatsapp.botlhale.xyz/getusername\', {"number": actual_contact}).content.decode(\'utf-8\')\n        \n        verification_url = "https://app-dev.botlhale.xyz/hm/verify_user/"\n\n        verification_response = None\n        verification_body   = {\'number\': actual_contact, \'task\':"add_user"}\n        params = {}\n        header = {}\n        verification_response = requests.post(verification_url, verification_body, header)\n        return []\n \nclass ActionSendFeedbackToGsheets(Action):\n    def name(self) -> Text:\n        return "action_send_feedback_to_gsheets"\n    def run(self, dispatcher: CollectingDispatcher,\n            tracker: Tracker,\n            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\n        print(\'action_send_feedback_to_gsheets...\')\n        \n        # get user number\n        platform_payload = {"org":"HM", "session_id":tracker.sender_id}\n        check_contact_payload = {"sender_id":tracker.sender_id}\n        platform = \'whatsapp\'#requests.post(\'https://app.botlhale.xyz/check_platform\', platform_payload).content.decode(\'utf-8\')\n        actual_contact = requests.post(\'https://\'+platform+\'.botlhale.xyz/getuserid\', check_contact_payload).content.decode(\'utf-8\')\n        \n        response = requests.post(\'https://app-dev.botlhale.xyz/save_hm_survey_data\', { "number": actual_contact, "score": tracker.slots.get("service_score"), "feedback": tracker.slots.get("feedback_for_the_agent")}).content.decode(\'utf-8\')\n        \n        from rasa_sdk.events import ActionExecuted, UserUttered\n      \n        data = {\n                    "intent": {\n                        "name": "main_menu",\n                        "confidence": 1.0,\n                    }\n              }\n        return [\n                    ActionExecuted("action_listen"),\n                    UserUttered(text="/main_menu", parse_data=data),\n              ] \n#begin-handoff\nclass ValidateContactForm(FormValidationAction):\n    def name(self) -> Text:\n        return "validate_contact_form"\n    def validate_name(\n        self,\n        slot_value: Text,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: DomainDict,\n    ) -> List[EventType]:\n        if slot_value.lower().islower():\n            return {"name": slot_value}\n        else:\n            dispatcher.utter_message(text = "I didn\'t quite get that. Please provide a name.")\n            return {"name": None}\n    \n    def validate_email(\n        self,\n        slot_value: Text,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: DomainDict,\n    ) -> List[EventType]:\n        if slot_value.lower().islower():\n            return {"email": slot_value}\n        else:\n            dispatcher.utter_message(text = "I didn\'t quite get that. Please use a valid email address.")\n            return  {"email": None}\nclass ActionHandoffOptions(Action):\n    def name(self) -> Text:\n        return "action_handoff_options_preset"\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[EventType]:\n        organisation = "DemoOrganisation"\n        \n        departments = json.loads(requests.get(\'https://app.botlhale.xyz/get_departments\',data=json.dumps({\'org\':organisation})).content.decode(\'utf-8\'))[\'departments\']\n        handoff_department_options = []\n        for department in departments:\n            button = {\n                    "title": department,\n                    "payload": \'/trigger_handoff{"department":\'+f\'"{department}"\'+\'}\',\n                }\n            handoff_department_options.append(button)\n        buttons = handoff_department_options\n    \n        \n        dispatcher.utter_message(text=\'What department would you like me to connect you to?\', buttons=buttons)\n        return []\nclass ActionHandoff(Action):\n    def name(self) -> Text:\n        return "action_handoff_preset"\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[EventType]:\n        department = tracker.slots.get("department")\n        dispatcher.utter_message(text="I have put you on the queue. You will be connected to the next available agent. To leave the queue, send \'disconnect\'.", json_message={"department": department})\n        return [SlotSet(\'department\', None)]\nclass ActionCheckContactList(Action):\n    def name(self) -> Text:\n        return "action_check_contact_list_preset"\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[EventType]:\n        organisation = "DemoOrganisation"\n        platform = requests.post(\'https://app.botlhale.xyz/check_platform\', {"org":organisation, "session_id":tracker.sender_id}).content.decode(\'utf-8\')\n        actual_contact = requests.post(\'https://\'+platform+\'.botlhale.xyz/getuserid\', {"sender_id":tracker.sender_id}).content.decode(\'utf-8\')\n        response = json.loads(requests.post(\'https://app.botlhale.xyz/contact_list\', { "task": "check_from_actions", "session_id": actual_contact, "organisation": organisation}).content.decode(\'utf-8\'))\n        found    = response["found"]\n\n        if not found:\n            details = [FollowupAction(\'contact_form\')]\n            return details\n    \nclass SubmitContact(Action):\n    def name(self) -> Text:\n        return "action_submit_contact"\n    async def run(\n        self,\n        dispatcher: CollectingDispatcher,\n        tracker: Tracker,\n        domain: Dict[Text, Any],\n    ) -> List[EventType]:\n        organisation = "DemoOrganisation"\n        name = tracker.slots.get("name")\n        email = tracker.slots.get("email")\n        language = "English"\n        platform = requests.post(\'https://app.botlhale.xyz/check_platform\', {"org":organisation, "session_id":tracker.sender_id}).content.decode(\'utf-8\')\n        actual_contact = requests.post(\'https://\'+platform+\'.botlhale.xyz/getuserid\', {"sender_id":tracker.sender_id}).content.decode(\'utf-8\')\n        response = requests.post(\'https://app.botlhale.xyz/contact_list\', { "task": "create_from_actions", "session_id": actual_contact, "organisation": organisation, "name":name, "email":email, "platform":platform, "language":language}).content.decode(\'utf-8\')\n        return []\n#end-handoff\n')),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Human HandOff Integration to External Parties")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"})),(0,s.kt)("h2",{id:"human-handoff-integration"},"Human Handoff Integration"),(0,s.kt)("p",null,"The Botlhale NLP Toolkit has a predefined dialogue that can be selected to enable the human handoff feature. See the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Botlhale-AI/documentation/blob/master/docs/0%20-%20Platform/bot-builder/3%20-%20Dialogue%20Manager.md#create-preset-dialogues"},"Dialogue Manager")," section of this documentation for information on how to enable this preset dialogue."),(0,s.kt)("p",null,"The human handoff dialogue contains the following two dialogue streams: "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"provide_handoff_options "),(0,s.kt)("li",{parentName:"ul"},"execute_handoff ")),(0,s.kt)("p",null,"These two dialogues work off the shell and do not require any modifications. "),(0,s.kt)("p",null,"The human handoff capability uses ",(0,s.kt)("a",{parentName:"p",href:"https://socket.io/docs/v3/"},"Socket.IO"),", a library that allows message passing between a server and multiple clients. All chatbots with human handoff set up need to connect to Botlhale AI's ",(0,s.kt)("a",{parentName:"p",href:"https://app.botlhale.xyz/live_server"},"Socket.IO server")),(0,s.kt)("p",null,"The following code snippets can be used to set up socket IO, as well as event listener and emitter functions to interface with Botlhale AI's Socket.IO server. The code snippets use JavaScript. However, if your bot is integrated in a non-JavaScript environment, there are several client implementations available in other languages. See the ",(0,s.kt)("a",{parentName:"p",href:"https://socket.io/docs/v3/"},"Socket.IO documentation")," for additional information."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"<script src=\"https://cdn.socket.io/3.1.3/socket.io.min.js\" \nintegrity=\"sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh\" crossorigin=\"anonymous\"><\/script>\n\n// SOCKET IO initialisation !\nconst socket = io.connect('https://app.botlhale.io/live_agent', {autoConnect: false});\n\n// first time connecting to the main socket !\nsocket.on('startConversation', function() {\n   socket.emit('username', {\n       \"ConversationID\": ConversationID,\n       \"BotID\": BotID\n   });\n});\n \n// receiving a message !\nsocket.on('to_user', function(data) {\n   let text = data.message;\n   setBotResponse(text);\n});\n \n// send messages to clients !\nsocket.on('messages', function(data) {\n   let messages = []\n   // populate messages variable with user-bot conversation !\n   // each element in the array must have the following format:\n   // {'sender': String, 'message': String}\n   // if message belongs to the user, then the value of 'sender' must be 'user'\n   // if message belongs to the bot, then the value of 'sender' must be 'bot'\n   socket.emit('messages_to_client', {\n       \"messages\": messages,\n       \"bot_id\": BotID\n   });\n});\n \n// disconnecting socket !\nsocket.on('disconnect_socket', function(data) {\n   socket.disconnect();\n});\n\n // Sending a message\nif (socket.connected) {\n  // Send a message to socket \n   socket.emit('from_user', {\n       \"message\": message,\n       \"ConversationID\": ConversationID,\n       \"BotID\": BotID\n   });\n \n} else {\n  // Send a message bot\n}\n\n")),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("blockquote",{parentName:"div"},(0,s.kt)("p",{parentName:"blockquote"},"We are here to help! Please email ",(0,s.kt)("a",{parentName:"p",href:"mailto:support@botlhale.ai"},"support@botlhale.ai")," with any questions.")))))}p.isMDXComponent=!0}}]);